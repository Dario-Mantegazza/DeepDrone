import numpy as np
from matplotlib import pyplot as plt


def plot_results(history, y_pred, y_test, save_dir, i):
    my_dpi = 96
    f_angle = plt.figure(figsize=(1920 / my_dpi, 1080 / my_dpi), dpi=my_dpi)
    tp_angle = f_angle.add_subplot(2, 2, 1)
    mse_angle = f_angle.add_subplot(2, 2, 2)
    mae_angle = f_angle.add_subplot(2, 2, 3)
    scatter_angle = f_angle.add_subplot(2, 2, 4)

    tp_angle.plot(y_test[:, 1])
    tp_angle.plot(y_pred[1])
    tp_angle.set_title('test-prediction angle')
    tp_angle.set_xlabel('frame')
    tp_angle.set_ylabel('value')
    tp_angle.legend(['test', 'pred'], loc='upper right')

    mse_angle.plot(history.history['angle_pred_mean_squared_error'])
    mse_angle.plot(history.history['val_angle_pred_mean_squared_error'])
    mse_angle.set_title('angle MSE')
    mse_angle.set_xlabel('epoch')
    mse_angle.set_ylabel('error')
    mse_angle.legend(['train', 'validation'], loc='upper right')

    mae_angle.plot(history.history['angle_pred_loss'])
    mae_angle.plot(history.history['val_angle_pred_loss'])
    mae_angle.set_title('angle loss(MAE)')
    mae_angle.set_xlabel('epoch')
    mae_angle.set_ylabel('MAE')
    mae_angle.legend(['train', 'test'], loc='upper right')

    scatter_angle.scatter(y_test[:, 1], y_pred[1])
    scatter_angle.set_title('scatter-plot angle')
    scatter_angle.set_xlabel('thruth')
    scatter_angle.set_ylabel('pred')
    scatter_angle.set_xlim(-50, +50)
    scatter_angle.set_ylim(-50, +50)

    f_angle.savefig(save_dir + "/result_model_" + str(i) + "/angle.png")

    f_distance = plt.figure(figsize=(1920 / my_dpi, 1080 / my_dpi), dpi=my_dpi)
    tp_distance = f_distance.add_subplot(2, 2, 1)
    mse_distance = f_distance.add_subplot(2, 2, 2)
    mae_distance = f_distance.add_subplot(2, 2, 3)
    scatter_distance = f_distance.add_subplot(2, 2, 4)

    tp_distance.plot(y_test[:, 0])
    tp_distance.plot(y_pred[0])
    tp_distance.set_title('test-prediction distance')
    tp_distance.set_xlabel('frame')
    tp_distance.set_ylabel('value')
    tp_distance.legend(['test', 'pred'], loc='upper right')

    mse_distance.plot(history.history['distance_pred_mean_squared_error'])
    mse_distance.plot(history.history['val_distance_pred_mean_squared_error'])
    mse_distance.set_title('distance MSE')
    mse_distance.set_xlabel('epoch')
    mse_distance.set_ylabel('error')
    mse_distance.legend(['train', 'validation'], loc='upper right')

    mae_distance.plot(history.history['distance_pred_loss'])
    mae_distance.plot(history.history['val_distance_pred_loss'])
    mae_distance.set_title('distance loss (MAE)')
    mae_distance.set_xlabel('epoch')
    mae_distance.set_ylabel('MAE')
    mae_distance.legend(['train', 'test'], loc='upper right')

    scatter_distance.scatter(y_test[:, 0], y_pred[0])
    scatter_distance.set_title('scatter-plot distance')
    scatter_distance.set_ylabel('pred')
    scatter_distance.set_xlabel('thruth')
    scatter_distance.set_xlim(0, +3)
    scatter_distance.set_ylim(0, +3)
    f_distance.savefig(save_dir + "/result_model_" + str(i) + "/distance.png")

    f_height = plt.figure(figsize=(1920 / my_dpi, 1080 / my_dpi), dpi=my_dpi)
    tp_height = f_height.add_subplot(2, 2, 1)
    mse_height = f_height.add_subplot(2, 2, 2)
    mae_height = f_height.add_subplot(2, 2, 3)
    scatter_height = f_height.add_subplot(2, 2, 4)

    tp_height.plot(y_test[:, 2])
    tp_height.plot(y_pred[2])
    tp_height.set_title('test-prediction height')
    tp_height.set_xlabel('frame')
    tp_height.set_ylabel('value')
    tp_height.legend(['test', 'pred'], loc='upper right')

    mse_height.plot(history.history['height_pred_mean_squared_error'])
    mse_height.plot(history.history['val_height_pred_mean_squared_error'])
    mse_height.set_title('height MSE')
    mse_height.set_xlabel('epoch')
    mse_height.set_ylabel('error')
    mse_height.legend(['train', 'validation'], loc='upper right')

    mae_height.plot(history.history['height_pred_loss'])
    mae_height.plot(history.history['val_height_pred_loss'])
    mae_height.set_title('height loss (MAE)')
    mae_height.set_xlabel('epoch')
    mae_height.set_ylabel('MAE')
    mae_height.legend(['train', 'test'], loc='upper right')

    scatter_height.scatter(y_test[:, 2], y_pred[2])
    scatter_height.set_title('scatter-plot height')
    scatter_height.set_ylabel('pred')
    scatter_height.set_xlabel('thruth')
    scatter_height.set_xlim(-1, +1)
    scatter_height.set_ylim(-1, +1)
    f_height.savefig(save_dir + "/result_model_" + str(i) + "/height.png")


def history_data_plot_crossvalidation(history_list, save_dir):
    angle_loss_list = []
    angle_mse_list = []
    val_angle_loss_list = []
    val_angle_mse_list = []
    distance_loss_list = []
    distance_mse_list = []
    val_distance_loss_list = []
    val_distance_mse_list = []
    height_loss_list = []
    height_mse_list = []
    val_height_loss_list = []
    val_height_mse_list = []
    for hist in history_list:
        angle_loss_list.append(hist['angle_pred_loss'])
        angle_mse_list.append(hist['angle_pred_mean_squared_error'])
        val_angle_loss_list.append(hist['val_angle_pred_loss'])
        val_angle_mse_list.append(hist['val_angle_pred_mean_squared_error'])
        distance_loss_list.append(hist['distance_pred_loss'])
        distance_mse_list.append(hist['distance_pred_mean_squared_error'])
        val_distance_loss_list.append(hist['val_distance_pred_loss'])
        val_distance_mse_list.append(hist['val_distance_pred_mean_squared_error'])
        height_loss_list.append(hist['height_pred_loss'])
        height_mse_list.append(hist['height_pred_mean_squared_error'])
        val_height_loss_list.append(hist['val_height_pred_loss'])
        val_height_mse_list.append(hist['val_height_pred_mean_squared_error'])
    with open(save_dir + "/mean_results.txt", "w+") as outfile:
        outfile.write("Mean Results across 5-fold crossvalidation\n")
        outfile.write("== == == == == == == == == == == ==\n")
        outfile.write("angle_pred_loss:         %.3f" % (np.mean(angle_loss_list)) + '\n')
        outfile.write("angle_mse_loss:          %.3f" % (np.mean(angle_mse_list)) + '\n')
        outfile.write("val_angle_pred_loss:     %.3f" % (np.mean(val_angle_loss_list)) + '\n')
        outfile.write("val_angle_mse_loss:      %.3f" % (np.mean(val_angle_mse_list)) + '\n')
        outfile.write("distance_pred_loss:      %.3f" % (np.mean(distance_loss_list)) + '\n')
        outfile.write("distance_mse_loss:       %.3f" % (np.mean(distance_mse_list)) + '\n')
        outfile.write("val_distance_pred_loss:  %.3f" % (np.mean(val_distance_loss_list)) + '\n')
        outfile.write("val_distance_mse_loss:   %.3f" % (np.mean(val_distance_mse_list)) + '\n')
        outfile.write("height_pred_loss:        %.3f" % (np.mean(height_loss_list)) + '\n')
        outfile.write("height_mse_loss:         %.3f" % (np.mean(height_mse_list)) + '\n')
        outfile.write("val_height_pred_loss:    %.3f" % (np.mean(val_height_loss_list)) + '\n')
        outfile.write("val_height_mse_loss:     %.3f" % (np.mean(val_height_mse_list)) + '\n')
        outfile.write("== == == == == == == == == == == ==\n")
        outfile.close()
    my_dpi = 96
    f_angle = plt.figure(figsize=(1920 / my_dpi, 1080 / my_dpi), dpi=my_dpi)
    mse_angle = f_angle.add_subplot(121)
    mae_angle = f_angle.add_subplot(122)
    mse_angle.plot(np.mean(np.array(angle_mse_list), axis=0))
    mse_angle.plot(np.mean(np.array(val_angle_mse_list), axis=0))
    mse_angle.set_title('mean angle MSE')
    mse_angle.set_xlabel('epoch')
    mse_angle.set_ylabel('error')
    mse_angle.legend(['train', 'validation'], loc='upper right')
    mae_angle.plot(np.mean(np.array(angle_loss_list), axis=0))
    mae_angle.plot(np.mean(np.array(val_angle_loss_list), axis=0))
    mae_angle.set_title('mean angle loss(MAE)')
    mae_angle.set_xlabel('epoch')
    mae_angle.set_ylabel('MAE')
    mae_angle.legend(['train', 'test'], loc='upper right')
    f_angle.savefig(save_dir + "mean_angle_result.png")
    f_distance = plt.figure(figsize=(1920 / my_dpi, 1080 / my_dpi), dpi=my_dpi)
    mse_distance = f_distance.add_subplot(121)
    mae_distance = f_distance.add_subplot(122)
    mse_distance.plot(np.mean(np.array(distance_mse_list), axis=0))
    mse_distance.plot(np.mean(np.array(val_distance_mse_list), axis=0))
    mse_distance.set_title('mean distance MSE')
    mse_distance.set_xlabel('epoch')
    mse_distance.set_ylabel('error')
    mse_distance.legend(['train', 'validation'], loc='upper right')
    mae_distance.plot(np.mean(np.array(distance_loss_list), axis=0))
    mae_distance.plot(np.mean(np.array(val_distance_loss_list), axis=0))
    mae_distance.set_title('mean distance loss(MAE)')
    mae_distance.set_xlabel('epoch')
    mae_distance.set_ylabel('MAE')
    mae_distance.legend(['train', 'test'], loc='upper right')
    f_distance.savefig(save_dir + "mean_distance_result.png")
    f_height = plt.figure(figsize=(1920 / my_dpi, 1080 / my_dpi), dpi=my_dpi)
    mse_height = f_height.add_subplot(121)
    mae_height = f_height.add_subplot(122)
    mse_height.plot(np.mean(np.array(height_mse_list), axis=0))
    mse_height.plot(np.mean(np.array(val_height_mse_list), axis=0))
    mse_height.set_title('mean height MSE')
    mse_height.set_xlabel('epoch')
    mse_height.set_ylabel('error')
    mse_height.legend(['train', 'validation'], loc='upper right')
    mae_height.plot(np.mean(np.array(height_loss_list), axis=0))
    mae_height.plot(np.mean(np.array(val_height_loss_list), axis=0))
    mae_height.set_title('mean height loss(MAE)')
    mae_height.set_xlabel('epoch')
    mae_height.set_ylabel('MAE')
    mae_height.legend(['train', 'test'], loc='upper right')
    f_height.savefig(save_dir + "mean_height_result.png")
